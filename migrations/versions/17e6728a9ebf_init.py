"""init

Revision ID: 17e6728a9ebf
Revises: 
Create Date: 2024-12-04 11:33:04.145933

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '17e6728a9ebf'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('project')
    op.drop_table('custodian')
    op.drop_index('sensor_data_time_idx', table_name='sensor_data')
    op.drop_table('sensor_data')
    op.drop_table('locationtag')
    op.drop_index('sensor_temp_humidity_data_time_idx', table_name='sensor_temp_humidity_data')
    op.drop_table('sensor_temp_humidity_data')
    op.drop_table('organization')
    op.drop_index('sensor_pm_data_time_idx', table_name='sensor_pm_data')
    op.drop_table('sensor_pm_data')
    op.drop_index('ix_node_node_id', table_name='node')
    op.drop_table('node')
    op.drop_index('sensor_temp_hum_dat_time_idx', table_name='sensor_temp_hum_dat')
    op.drop_table('sensor_temp_hum_dat')
    op.drop_table('sensor_locations')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('sensor_locations',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('sensor_locations_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='sensor_locations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sensor_temp_hum_dat',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rel_hum', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('abs_hum', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('heat_index', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('sensor_name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['node.node_id'], name='sensor_temp_hum_dat_node_id_fkey')
    )
    op.create_index('sensor_temp_hum_dat_time_idx', 'sensor_temp_hum_dat', [sa.text('time DESC')], unique=False)
    op.create_table('node',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('node_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('node_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('date_registered', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('date_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('custodian_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('commissioned', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['custodian_id'], ['custodian.id'], name='node_custodian_id_fkey'),
    sa.ForeignKeyConstraint(['location_id'], ['sensor_locations.id'], name='node_location_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='node_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_node_node_id', 'node', ['node_id'], unique=True)
    op.create_table('sensor_pm_data',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('pm1', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pm2_5', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pm10', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('sensor_name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['node.node_id'], name='sensor_pm_data_node_id_fkey')
    )
    op.create_index('sensor_pm_data_time_idx', 'sensor_pm_data', [sa.text('time DESC')], unique=False)
    op.create_table('organization',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('organization_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('headquaters', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='organization_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('sensor_temp_humidity_data',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rel_hum', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('abs_hum', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('heat_index', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('sensor_name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['node_id'], ['node.node_id'], name='sensor_temp_humidity_data_node_id_fkey')
    )
    op.create_index('sensor_temp_humidity_data_time_idx', 'sensor_temp_humidity_data', [sa.text('time DESC')], unique=False)
    op.create_table('locationtag',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('location_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('location_tag', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['location_id'], ['sensor_locations.id'], name='locationtag_location_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='locationtag_pkey')
    )
    op.create_table('sensor_data',
    sa.Column('time', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('node_id', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.Column('pm1', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('pm2_5', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('temperature', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('humidity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['node_id'], ['node.node_id'], name='sensor_data_node_id_fkey')
    )
    op.create_index('sensor_data_time_idx', 'sensor_data', [sa.text('time DESC')], unique=False)
    op.create_table('custodian',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('project', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('affiliation', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['affiliation'], ['organization.id'], name='custodian_affiliation_fkey'),
    sa.ForeignKeyConstraint(['project'], ['project.id'], name='custodian_project_fkey'),
    sa.PrimaryKeyConstraint('id', name='custodian_pkey')
    )
    op.create_table('project',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('project_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='project_pkey')
    )
    # ### end Alembic commands ###
